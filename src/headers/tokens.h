#ifndef TOKENS_H
#define TOKENS_H

#ifdef __cplusplus
extern "C" {
#endif

typedef uint8_t fbgc_token;

typedef struct {
	fbgc_token tokencode;
	const char * name;
}token_struct;


//TOKENS_BEGIN
//Autogenerated by helper/token_creator.py
#define UNKNOWN 0 // Begin with unknown
#define NIL 1 // null or none
#define CONSTANT 2 // did we use?
#define RAW_MEMORY 3 // c-like buffer class
#define LOGIC 4 // logical true or false
#define INT 5 // int class
#define DOUBLE 6 // double class
#define COMPLEX 7 // complex class
#define STRING 8 // string class
#define MATRIX 9 // matrix class
#define MAP 10 // map class
#define TUPLE 11 // tuple class
#define INSTANCE 12 //
#define CSTRING 13 // raw c strings without length
#define CFUN 14 // c function
#define FUN 15 // builtin fbgc function
#define CLASS 16 //
#define CSTRUCT 17 // 
#define IDENTIFIER 18 // identifiers
#define RANGE 19 // range obj
#define ARRAY 20 //
#define LINKED_LIST 21 //
#define CMODULE 22 //
#define GARBAGE 23 //
#define FIELD 24 //
#define END 25 // end
#define FUN_MAKE 26 //
#define CLASS_MAKE 27 //
#define ELIF 28 //
#define ELSE 29 //
#define WHILE 30 //
#define FOR 31 //
#define BREAK 32 //
#define CONT 33 //
#define IF 34 //
#define RETURN 35 //
#define NEWLINE 36 //
#define LPARA 37 // (
#define RPARA 38 // )
#define LBRACK 39 // [
#define RBRACK 40 // ]
#define LBRACE 41 // {
#define RBRACE 42 // }
#define COMMA 43 // , -- set1 start
#define DOT 44 // .
#define SEMICOLON 45 // ; 
#define COLON 46 // : set1 finish
#define RSHIFT 47 // >> assignment and binary operators start from here
#define LSHIFT 48 // <<
#define STARSTAR 49 // **
#define SLASHSLASH 50 // //
#define PLUS 51 // +
#define MINUS 52 // -
#define STAR 53 // *
#define SLASH 54 // /
#define CARET 55 // ^
#define PERCENT 56 // % assignment finish
#define LOEQ 57 // <=
#define GREQ 58 // >=
#define EQEQ 59 // ==
#define NOTEQ 60 // !=
#define LOWER 61 // <
#define GREATER 62 // >
#define PIPE 63 // |
#define AMPERSAND 64 // & binary finish
#define EXCLAMATION 65 // !
#define TILDE 66 // ~
#define UPLUS 67 // +
#define UMINUS 68 // -
#define ASSIGN 69 // = assignment ops start from here
#define RSHIFT_ASSIGN 70 // >>=
#define LSHIFT_ASSIGN 71 // <<=
#define STARSTAR_ASSIGN 72 // **=
#define SLASHSLASH_ASSIGN 73 // //=
#define PLUS_ASSIGN 74 // +=
#define MINUS_ASSIGN 75 // -=
#define STAR_ASSIGN 76 // *=
#define SLASH_ASSIGN 77 // /=
#define CARET_ASSIGN 78 // ^=
#define PERCENT_ASSIGN 79 // %=
#define ASSIGN_SUBSCRIPT 80 //
#define LEN 81 //
#define JUMP 82 //
#define FOR_BEGIN 83 //
#define FUN_CALL 84 //
#define KWFUN_CALL 85 //
#define BUILD_TUPLE 86 //
#define BUILD_MATRIX 87 //
#define BUILD_MAP 88 //
#define POP_TOP 89 //
#define ROW 90 //
#define LOAD_SUBSCRIPT 91 //
#define CLASS_CALL 92 //
#define CLASS_SELF 93 //
#define BUILD_FUN_DEFAULT_ARGS 94 //
#define TOKEN_LIST_AS_STRINGS()\
"UNKNOWN",\
"NIL",\
"CONSTANT",\
"RAW_MEMORY",\
"LOGIC",\
"INT",\
"DOUBLE",\
"COMPLEX",\
"STRING",\
"MATRIX",\
"MAP",\
"TUPLE",\
"INSTANCE",\
"CSTRING",\
"CFUN",\
"FUN",\
"CLASS",\
"CSTRUCT",\
"IDENTIFIER",\
"RANGE",\
"ARRAY",\
"LINKED_LIST",\
"CMODULE",\
"GARBAGE",\
"FIELD",\
"END",\
"FUN_MAKE",\
"CLASS_MAKE",\
"ELIF",\
"ELSE",\
"WHILE",\
"FOR",\
"BREAK",\
"CONT",\
"IF",\
"RETURN",\
"NEWLINE",\
"LPARA",\
"RPARA",\
"LBRACK",\
"RBRACK",\
"LBRACE",\
"RBRACE",\
"COMMA",\
"DOT",\
"SEMICOLON",\
"COLON",\
"RSHIFT",\
"LSHIFT",\
"STARSTAR",\
"SLASHSLASH",\
"PLUS",\
"MINUS",\
"STAR",\
"SLASH",\
"CARET",\
"PERCENT",\
"LOEQ",\
"GREQ",\
"EQEQ",\
"NOTEQ",\
"LOWER",\
"GREATER",\
"PIPE",\
"AMPERSAND",\
"EXCLAMATION",\
"TILDE",\
"UPLUS",\
"UMINUS",\
"ASSIGN",\
"RSHIFT_ASSIGN",\
"LSHIFT_ASSIGN",\
"STARSTAR_ASSIGN",\
"SLASHSLASH_ASSIGN",\
"PLUS_ASSIGN",\
"MINUS_ASSIGN",\
"STAR_ASSIGN",\
"SLASH_ASSIGN",\
"CARET_ASSIGN",\
"PERCENT_ASSIGN",\
"ASSIGN_SUBSCRIPT",\
"LEN",\
"JUMP",\
"FOR_BEGIN",\
"FUN_CALL",\
"KWFUN_CALL",\
"BUILD_TUPLE",\
"BUILD_MATRIX",\
"BUILD_MAP",\
"POP_TOP",\
"ROW",\
"LOAD_SUBSCRIPT",\
"CLASS_CALL",\
"CLASS_SELF",\
"BUILD_FUN_DEFAULT_ARGS",\
//TOKENS_END

#define GM_ERROR 0
#define GM_NEWLINE 1
#define GM_ATOM 2
#define GM_ID 3
#define GM_BINOP 4
#define GM_UNOP 5
#define GM_ASSIGNOP 6
#define GM_EXPRESSION 7
#define GM_UNBALANCED_LIST 8
#define GM_BALANCED_LIST 9
#define GM_LPARA 10
#define GM_LBRACK 11
#define GM_LBRACE 12
#define GM_PIPE 13
#define GM_FUNCTIONAL 14
#define GM_MATRIX 15
#define GM_DOT 16
#define GRAMMAR_TOKENS_AS_STRINGS()\
"GM_ERROR",\
"GM_NEWLINE",\
"GM_ATOM",\
"GM_ID",\
"GM_BINOP",\
"GM_UNOP",\
"GM_ASSIGNOP",\
"GM_EXPRESSION",\
"GM_UNBALANCED_LIST",\
"GM_BALANCED_LIST",\
"GM_LPARA",\
"GM_LBRACK",\
"GM_LBRACE",\
"GM_PIPE",\
"GM_FUNCTIONAL",\
"GM_MATRIX",\
"GM_DOT"

extern const char * gm_name_array[];
extern const char * object_name_array[];
extern const token_struct operator_token_array[];
extern const token_struct reserved_words_token_array[];

const char * get_token_as_str(fbgc_token tok);




#define is_fbgc_OPERATOR(T)(T>=COLON && T< ASSIGN_SUBSCRIPT )
#define is_fbgc_IDENTIFIER(T)(T == IDENTIFIER)
#define is_fbgc_ATOM(T)(T>= LOGIC && T<=STRING)

#define is_fbgc_PARA(T)(T>=LPARA && T<= RBRACK)
#define is_fbgc_UNARY_OPERATOR(T)( T >= EXCLAMATION && T<= UMINUS)
#define is_fbgc_ASSIGNMENT_OPERATOR(T)( T >= ASSIGN && T< ASSIGN_SUBSCRIPT)
//solve this colon issue..
#define is_fbgc_BINARY_OPERATOR(T)( T>=COLON && T<= AMPERSAND)

#define is_fbgc_FUNCTIONABLE(x)(x == IF || x == ELIF || x == ELSE || x == WHILE || x == FUN_MAKE || x == FOR)

#define is_fbgc_EXPRESSION(x)(is_fbgc_ATOM(x) || is_fbgc_IDENTIFIER(x)|| x == EXPRESSION || x == UNARY_EXPRESSION ||x==BINARY_EXPRESSION||\
is_fbgc_TUPLE(x) || is_fbgc_MATRIX(x) || x == CFUN || x == SEMICOLON || x == LEN)

#define is_fbgc_JUMP_STATEMENT(x)(x == BREAK || x == CONT)

#define is_fbgc_ASSIGNMENT(x)(x==ASSIGNMENT_EXPRESSION)
#define is_fbgc_STATEMENT(x)(x == STATEMENT || is_fbgc_EXPRESSION(x) || is_fbgc_ASSIGNMENT(x) || is_fbgc_JUMP_STATEMENT(x))

#ifdef  __cplusplus
}
#endif

#endif
